import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Navbar from "../components/navbar";
import { cookies } from "next/headers";
import { UserProvider } from "@/context/UserContext";
import jwt from "jsonwebtoken";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookieStore = await cookies();
  const token = cookieStore.get("auth_token")?.value;

  let usernameId: string | null = null;

  if (token && process.env.JWT_SECRET) {
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET) as { id: string };
      usernameId = decoded.id;
    } catch (err) {
      console.error("Invalid JWT:", err);
    }
  }

  return (
    <html lang="en" className="bg-gray-50">
      <body
        className={`min-h-screen ${geistSans.variable} ${geistMono.variable} antialiased bg-gray-50 text-gray-900`}
      >
        <Navbar id={usernameId} />
        <UserProvider value={{ id: usernameId }}>
          {children}
        </UserProvider>
      </body>
    </html>
  );
}
